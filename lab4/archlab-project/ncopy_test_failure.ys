
            .pos 0
            irmovq stack, %rsp
            irmovq data_to_copy, %rdi
            irmovq data_dst, %rsi
            irmovq $7, %rdx

            call ncopy
            halt
            nop
            nop
            nop
            nop
            nop
        
        ################################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
# - use iopq to save one instruction
# - remove jmp when val<=0; instead, use mask to count positive
#
################################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:
################################################################################
# You can modify this portion
	xorq %rax, %rax        # count = 0
    andq %rdx, %rdx
    jle Done

Loop:
    # if less than 4 remain, jump to tail
    rrmovq %rdx, %r9
    isubq $4, %r9
    jl Tail

    # load 4 elements (no use after load hazard)
    mrmovq 0(%rdi), %r10
    mrmovq 8(%rdi), %r11
    mrmovq 16(%rdi), %r12
    mrmovq 24(%rdi), %r13

    # store them
    rmmovq %r10, 0(%rsi)
    rmmovq %r11, 8(%rsi)
    rmmovq %r12, 16(%rsi)
    rmmovq %r13, 24(%rsi)

    # check each and update count
    rrmovq %rax, %r14
    iaddq $1, %r14
    andq %r10, %r10
    cmovg %r14, %rax

    rrmovq %rax, %r14
    iaddq $1, %r14
    andq %r11, %r11
    cmovg %r14, %rax

    rrmovq %rax, %r14
    iaddq $1, %r14
    andq %r12, %r12
    cmovg %r14, %rax

    rrmovq %rax, %r14
    iaddq $1, %r14
    andq %r13, %r13
    cmovg %r14, %rax

    # advance pointers
    iaddq $32, %rdi
    iaddq $32, %rsi
    isubq $4, %rdx
    jne Loop

Tail:
    # handle leftover (<4) elements
    andq %rdx, %rdx
    jle Done

TLoop:
    mrmovq (%rdi), %r10
    rmmovq %r10, (%rsi)
    andq %r10, %r10
    rrmovq %rax, %r11
    iaddq $1, %r11
    cmovg %r11, %rax
    iaddq $8, %rdi
    iaddq $8, %rsi
    isubq $1, %rdx
    jne TLoop

Done:
    ret

        # do not fall through to the end of the source!
        # Otherwise you will encounter this trap :)
        trapititit: jmp trapititit

            .pos 0x1000 # source code + stack limits to 4kb
            .align 8
        stack:
        data_to_copy:
            .quad 0x216c1524cbac57c0
.quad 0x0a53eb08063a44df
.quad 0x45f965b948778197
.quad 0x6f2fa9d01ba03887
.quad 0x60c57eba69ed4e15
.quad 0x22c65ce977dd39cb
.quad 0xa5d1ce0c5a7c6abf
        data_dst:
        